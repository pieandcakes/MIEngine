<!--
// Copyright (c) Microsoft. All rights reserved.
// Licensed under the MIT license. See LICENSE file in the project root for full license information.
-->
<ui:DialogWindow x:Class="Microsoft.SSHDebugPS.ContainerPicker"
                 xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
                 xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
                 xmlns:ui="clr-namespace:Microsoft.VisualStudio.PlatformUI;assembly=Microsoft.VisualStudio.Shell.15.0"
                 xmlns:vsimaging="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.Imaging"
                 xmlns:vsimagecatalog="clr-namespace:Microsoft.VisualStudio.Imaging;assembly=Microsoft.VisualStudio.ImageCatalog"
                 xmlns:local="clr-namespace:Microsoft.SSHDebugPS"
                 xmlns:docker="clr-namespace:Microsoft.SSHDebugPS.Docker"
                 MinWidth="450"
                 MinHeight="500"
                 Width="450"
                 Height="535"
                 ShowInTaskbar="False"
                 Name="ContainerPickerDialog"
                 FontFamily="{DynamicResource VsFont.EnvironmentFontFamily}"
                 FontSize="{DynamicResource VsFont.EnvironmentFontSize}"
                 Title="{x:Static local:UIResources.DialogTitle}"
                 WindowStartupLocation="CenterOwner">
    <ui:DialogWindow.Resources>
        <Style x:Key="DialogWindowStyle"
               TargetType="{x:Type Window}">
            <Setter x:Uid="uidRemoteDiscoveryDialogTitle"
                    Property="Title"
                    Value="Docker Connections"
                    Localization.Attributes="Value(Readable Modifiable Text)" />
            <!--<Setter Property="Width" Value="450" />
            <Setter Property="MinWidth" Value="450" />
            <Setter Property="Height" Value="535" />
            <Setter Property="MinHeight" Value="500" />-->
            <Setter Property="FontFamily"
                    Value="{DynamicResource VsFont.EnvironmentFontFamily}" />
            <Setter Property="FontSize"
                    Value="{DynamicResource VsFont.EnvironmentFontSize}" />
            <Setter Property="BorderBrush"
                    Value="Transparent" />
        </Style>
        <DataTemplate x:Key="AuthModeListTemplate">
            <TextBlock Text="{Binding Path=Name}" />
        </DataTemplate>
        <!-- Converters-->
        <docker:BoolToVisibilityConverter x:Key="BoolToVisibilityConverter" />
        <Style x:Key="ExpanderStyle"
               TargetType="{x:Type Expander}">
            <Setter Property="Background"
                    Value="Transparent" />
            <Setter Property="Margin"
                    Value="0,12,0,0" />
            <Setter Property="BorderThickness"
                    Value="0,1,0,0" />
            <Setter Property="BorderBrush"
                    Value="LightGray"></Setter>
        </Style>
        <Style x:Key="ScrollViewerStyle"
               TargetType="{x:Type ScrollViewer}">
            <Setter Property="Background"
                    Value="{DynamicResource SystemColors.WindowBrush}" />
            <Setter Property="HorizontalScrollBarVisibility"
                    Value="Disabled" />
            <Setter Property="VerticalScrollBarVisibility"
                    Value="Visible" />
        </Style>
        <Style x:Key="ConfigureConnectionHyperLinkStyle"
               TargetType="{x:Type Hyperlink}">
            <!--<EventSetter Event="Click" Handler="ConfigureManualConnection_Click"></EventSetter>-->
        </Style>
        <!-- ListBoxItem Styles-->
        <Style x:Key="ListBoxItemFocusVisualStyle"
               TargetType="{x:Type Control}">
            <Setter Property="BorderBrush"
                    Value="Transparent" />
        </Style>
        <Style x:Key="ListBoxStyle"
               TargetType="{x:Type ListBox}">
            <!--<EventSetter Event="GotKeyboardFocus" Handler="ListBox_GotKeyboardFocus" />-->
            <Setter Property="ItemTemplate"
                    Value="{DynamicResource instanceLayout}" />
            <Setter Property="IsSynchronizedWithCurrentItem"
                    Value="True" />
            <Setter Property="BorderThickness"
                    Value="0" />
            <Setter Property="Padding"
                    Value="0" />
            <Setter Property="ScrollViewer.HorizontalScrollBarVisibility"
                    Value="Disabled" />
            <Setter Property="ScrollViewer.VerticalScrollBarVisibility"
                    Value="Hidden" />
            <Setter Property="Focusable"
                    Value="False" />
            <Setter Property="ItemsPanel">
                <Setter.Value>
                    <ItemsPanelTemplate>
                        <DockPanel IsItemsHost="True"
                                   LastChildFill="False" />
                    </ItemsPanelTemplate>
                </Setter.Value>
            </Setter>
            <Style.Triggers>
                <DataTrigger Binding="{Binding RelativeSource={x:Static RelativeSource.Self}, Path=Items.Count, Mode=OneWay}"
                             Value="0">
                    <Setter Property="Template">
                        <Setter.Value>
                            <ControlTemplate>
                                <Grid>
                                    <Grid.RowDefinitions>
                                        <RowDefinition Height="Auto" />
                                        <RowDefinition Height="Auto" />
                                    </Grid.RowDefinitions>

                                    <TextBlock x:Uid="uidNoConnectionsFoundTextBlock"
                                               Grid.Row="0"
                                               HorizontalAlignment="Center">No Docker containers found</TextBlock>
                                    <TextBlock Grid.Row="1"
                                               HorizontalAlignment="Center"
                                               Visibility="{ Binding IsContainersVisible, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay }">
                                        <Hyperlink Style="{DynamicResource ConfigureConnectionHyperLinkStyle}">
                                            <TextBlock />
                                        </Hyperlink>
                                    </TextBlock>
                                </Grid>
                            </ControlTemplate>
                        </Setter.Value>
                    </Setter>
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="ListBoxContainerStyle"
               TargetType="{x:Type ListBoxItem}">
            <Style.Triggers>
                <Trigger Property="IsSelected"
                         Value="true">
                    <Setter Property="BorderThickness"
                            Value="1" />
                </Trigger>
            </Style.Triggers>

            <Setter Property="AutomationProperties.Name"
                    Value="{Binding MachineNameAndAddress, Mode=OneWay}" />
            <Setter Property="AutomationProperties.HelpText"
                    Value="{Binding HelpText, Mode=OneWay}" />
            <Setter Property="DockPanel.Dock"
                    Value="Top" />
            <Setter Property="BorderBrush"
                    Value="LightSteelBlue"></Setter>
            <Setter Property="BorderThickness"
                    Value="0"></Setter>
            <Setter Property="IsSelected"
                    Value="{Binding IsSelected, Mode=TwoWay}"></Setter>
            <Setter Property="FocusVisualStyle"
                    Value="{StaticResource ListBoxItemFocusVisualStyle}"></Setter>
            <Setter Property="HorizontalContentAlignment"
                    Value="Stretch" />
            <Setter Property="Visibility"
                    Value="{Binding IsVisible, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}" />
        </Style>
        <!-- Item Styles-->
        <Style x:Key="ItemHeaderStyle"
               TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment"
                    Value="Center" />
            <Setter Property="FontWeight"
                    Value="Normal" />
            <Style.Triggers>
                <DataTrigger Binding="{Binding IsSelected, Mode=TwoWay}"
                             Value="True">
                    <Setter Property="FontWeight"
                            Value="Bold" />
                </DataTrigger>
            </Style.Triggers>
        </Style>
        <Style x:Key="SelectedLabelStyle"
               TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment"
                    Value="Center" />
        </Style>
        <Style x:Key="SelectedTextBlockStyle"
               TargetType="{x:Type TextBlock}">
            <Setter Property="VerticalAlignment"
                    Value="Center" />
        </Style>
        <Style x:Key="WarningBorderStyle"
               TargetType="{x:Type Border}">
            <Setter Property="Width"
                    Value="Auto" />
            <Setter Property="BorderBrush"
                    Value="LightGray" />
            <Setter Property="BorderThickness"
                    Value="1" />
            <Setter Property="Margin"
                    Value="0 5 0 0" />
            <Setter Property="Visibility"
                    Value="{Binding ShowWarning, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}" />
        </Style>
        <Style x:Key="WarningTextBlockStyle"
               TargetType="{x:Type TextBlock}">
            <Setter Property="TextWrapping"
                    Value="Wrap" />
            <Setter Property="Margin"
                    Value="10 0 0 0" />
        </Style>

        <!-- Template for each item in the connection list-->
        <DataTemplate x:Key="instanceLayout"
                      DataType="DockerContainerInstance">
            <Grid Margin="7,7,7,12">
                <Grid.RowDefinitions>
                    <RowDefinition Height="25"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                    <RowDefinition Height="Auto"></RowDefinition>
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="*"></ColumnDefinition>
                </Grid.ColumnDefinitions>

                <AdornerDecorator Grid.Row="0"
                                  VerticalAlignment="Center">
                    <!--<TextBlock Text="{Binding MachineNameAndAddress, Mode=OneWay, UpdateSourceTrigger=PropertyChanged}" Style="{StaticResource ItemHeaderStyle}"
                        x:Uid="uidMachineNameLabel"
                        Tag="0"
                        local:RemoteInstance.SourceRemoteInstance="{Binding Self}"/>-->
                </AdornerDecorator>

                <AdornerDecorator Grid.Row="1"
                                  VerticalAlignment="Center">
                    <StackPanel Orientation="Horizontal"
                                Visibility="{Binding AddressIsVisible, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}">
                        <TextBlock x:Uid="uidFullAddressLabel"
                                   Text="Address:"
                                   Style="{StaticResource SelectedLabelStyle}" />
                        <!--<TextBlock Text="{Binding FullAddress, Mode=OneTime}" Style="{StaticResource SelectedTextBlockStyle}"
                            Tag="1"
                            local:RemoteInstance.SourceRemoteInstance="{Binding Self}"/>-->
                    </StackPanel>
                </AdornerDecorator>

                <AdornerDecorator Grid.Row="2"
                                  VerticalAlignment="Center">
                    <StackPanel Orientation="Horizontal"
                                Visibility="{Binding AuthModeIsVisible, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}">
                        <TextBlock x:Uid="uidAuthModeLabel"
                                   Text="Authentication:"
                                   Style="{StaticResource SelectedLabelStyle}" />
                        <!--<TextBlock Text="{Binding AuthMode.Name, Mode=OneTime}" Style="{StaticResource SelectedTextBlockStyle}"
                            Tag="2"
                            local:RemoteInstance.SourceRemoteInstance="{Binding Self}"/>-->
                    </StackPanel>
                </AdornerDecorator>

                <AdornerDecorator Grid.Row="4"
                                  VerticalAlignment="Center">
                    <StackPanel Orientation="Horizontal"
                                Visibility="{Binding ArchitectureIsVisible, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}">
                        <TextBlock x:Uid="uidArchitectureLabel"
                                   Text="Architecture:"
                                   Style="{StaticResource SelectedLabelStyle}" />
                        <!--<TextBlock Text="{Binding Architecture, Mode=OneTime}" Style="{StaticResource SelectedTextBlockStyle}"
                            Tag="3"
                            local:RemoteInstance.SourceRemoteInstance="{Binding Self}"/>-->
                    </StackPanel>
                </AdornerDecorator>

                <AdornerDecorator Grid.Row="5"
                                  VerticalAlignment="Center">
                    <StackPanel Orientation="Horizontal"
                                Visibility="{Binding IsSelected, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}">
                        <TextBlock x:Uid="uidWindowsVersionLabel"
                                   Text="Windows Version:"
                                   Style="{StaticResource SelectedLabelStyle}" />
                        <!--<TextBlock Text="{Binding WindowsVersion, Mode=OneTime}" Style="{StaticResource SelectedTextBlockStyle}"
                      Tag="4"
                      local:RemoteInstance.SourceRemoteInstance="{Binding Self}"/>-->
                    </StackPanel>
                </AdornerDecorator>

                <Border Grid.Row="7"
                        Style="{StaticResource WarningBorderStyle}">
                    <Grid Margin="5">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="Auto"></ColumnDefinition>
                            <ColumnDefinition Width="*"></ColumnDefinition>
                        </Grid.ColumnDefinitions>

                        <!--<Image  Grid.Column="0" 
                                Source="{StaticResource WarningImageSource}" 
                                HorizontalAlignment="Left" 
                                Height="16" 
                                Width="16" 
                                VerticalAlignment="Top">
                        </Image>-->

                        <TextBlock Grid.Column="1"
                                   Text="{Binding Warning, Mode=OneTime}"
                                   Style="{StaticResource WarningTextBlockStyle}"
                                   x:Uid="uidWarningLabel" />
                    </Grid>
                </Border>
                <Button Grid.Row="7"
                        x:Name="_btnOk"
                        x:Uid="uidInstanceSelectButton"
                        Content="Select"
                        Height="23"
                        Width="75"
                        VerticalAlignment="Bottom"
                        HorizontalAlignment="Right"
                        VerticalContentAlignment="Center"
                        Visibility="{Binding IsSelected, Converter={StaticResource BoolToVisibilityConverter}, Mode=OneWay}" />
                <!--Click="_btnSelect_Click"-->
            </Grid>
        </DataTemplate>
    </ui:DialogWindow.Resources>

    <!-- Main layout grid -->
    <Grid Margin="12">
        <Grid.RowDefinitions>
            <RowDefinition Height="Auto" />
            <RowDefinition Height="45" />
            <RowDefinition Height="Auto" />
            <RowDefinition Height="*" />
            <RowDefinition Height="Auto" />
        </Grid.RowDefinitions>
        <Grid.ColumnDefinitions>
            <ColumnDefinition Width="*" />
        </Grid.ColumnDefinitions>

        <Border x:Uid="uidsearchControlParent"
                x:Name="_searchControlParent"
                Grid.Row="0"
                Width="Auto"
                SnapsToDevicePixels="true">
            <Grid Margin="12">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>
                <Grid.ColumnDefinitions>
                    <ColumnDefinition Width="Auto" />
                </Grid.ColumnDefinitions>

                <DockPanel Grid.Row="0">

                    <Label x:Name="_isLocalConnectionLabel"
                           Content="{x:Static local:UIResources.IsLocalConnectionLabel}" />
                    <CheckBox x:Name="_isLocalConnectionCheckbox"
                              IsChecked="{Binding IsLocalConnection, Mode=TwoWay}" />
                </DockPanel>

                <DockPanel Grid.Row="1">
                    <Label x:Name="_remoteConnectionStringLabel"
                           Target="{Binding ElementName=_remoteConnectionString}"
                           Content="{x:Static local:UIResources.RemoteConnectionStringLabel}"
                           IsEnabled="{Binding IsLocalConnection, Converter={StaticResource BoolToVisibilityConverter},ConverterParameter=flip}" />
                    <TextBox x:Uid="uidRemoteConnectionString"
                             x:Name="_remoteConnectionString"
                             HorizontalAlignment="Stretch"
                             Text="{Binding RemoteConnectionString, Mode=TwoWay}"
                             IsEnabled="{Binding IsLocalConnection, Converter={StaticResource BoolToVisibilityConverter},ConverterParameter=flip}"/>
                    <Button x:Name="_remoteConnect"
                            Content="Connect"
                            Command="{Binding SSHCommand}"
                            IsEnabled="{Binding IsLocalConnection, Converter={StaticResource BoolToVisibilityConverter},ConverterParameter=flip}"/>
                </DockPanel>
            </Grid>
        </Border>

        <Button x:Uid="uidRefreshButton"
                AutomationProperties.Name="Refresh"
                Margin="0,12,0,0"
                Grid.Row="1"
                HorizontalAlignment="Right"
                VerticalAlignment="Center"
                Height="20"
                Width="20"
                Command="{Binding RefreshCommand, Mode=OneWay}">
            <vsimaging:CrispImage Moniker="{x:Static vsimagecatalog:KnownMonikers.Refresh}"
                                  Width="16"
                                  Height="16" />

        </Button>

        <!-- Docker Instance display-->
        <ScrollViewer AutomationProperties.Name="ConnectionScrollViewer"
                      Style="{StaticResource ScrollViewerStyle}"
                      Grid.Row="3">
            <Grid Grid.Row="1">
                <Grid.RowDefinitions>
                    <RowDefinition Height="Auto" />
                </Grid.RowDefinitions>

                <ListBox x:Name="_directConnectedListBox"
                         AutomationProperties.AutomationId="aidDirectConnectedListBox"
                         ItemsSource="{Binding Path=DirectConnectedInstances, Mode=OneWay }"
                         SelectedValue="{Binding SelectedInstance}"
                         SelectedIndex="{Binding DirectConnectSelectedIndex, Mode=OneWay }"
                         ItemContainerStyle="{StaticResource ListBoxContainerStyle}"
                         Style="{StaticResource ListBoxStyle}" />
                <!-- SelectionChanged="_directConnectedListBox_SelectionChanged"-->

            </Grid>
        </ScrollViewer>

        <!-- OK / Cancel buttons -->
        <StackPanel Grid.Row="4"
                    Grid.ColumnSpan="2"
                    Margin="4"
                    Orientation="Horizontal"
                    HorizontalAlignment="Right">

            <Button Margin="4"
                    Height="23"
                    MinWidth="75"
                    IsDefault="True"
                    Command="{Binding OkCommand}"
                    CommandParameter="{Binding ElementName=ContainerPickerDialog}"
                    Content="OK" />

            <Button Height="23"
                    MinWidth="75"
                    IsCancel="True"
                    Command="{Binding CancelCommand}"
                    CommandParameter="{Binding ElementName=ContainerPickerDialog}"
                    Content="Cancel" />
        </StackPanel>
    </Grid>
</ui:DialogWindow>
